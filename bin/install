#!/usr/bin/env bash

set -e
set -o pipefail

ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version  }
TMPDIR=${TMPDIR:-/tmp}
[ -n "$ASDF_INSTALL_VERSION" ] || (echo >&2 'Missing ASDF_INSTALL_VERSION' && exit 1)
[ -n "$ASDF_INSTALL_PATH" ] || (echo >&2 'Missing ASDF_INSTALL_PATH' && exit 1)

# from https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
function vercomp() {
  if [[ "$1" == "$2" ]]; then
    return 0
  fi
  local IFS=.
  # shellcheck disable=SC2206
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i = ${#ver1[@]}; i < ${#ver2[@]}; i++)); do
    ver1[i]=0
  done
  for ((i = 0; i < ${#ver1[@]}; i++)); do
    if [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      return 2
    fi
  done
  return 0
}

install_kustomize() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local tmp_download_dir=$4
  local bin_install_path="${install_path}/bin"
  local download_url="$(get_download_url $version)"
  local download_fallback_url=""
  if [[ "$(get_platform)" == "darwin" && "$(get_arch)" == "arm64" ]] ; then
    # some kustomize versions don't have darwin_arm64 binaries 
    # (example: https://github.com/kubernetes-sigs/kustomize/releases/tag/kustomize%2Fv5.1.0),
    # so we fall back to amd64 binaries which successfully run on M1/M2 with Rosetta
    download_fallback_url="$(get_download_url $version amd64)"
  fi

  mkdir -p "${bin_install_path}"

  local bin_path="${bin_install_path}/kustomize"
  local download_path="${tmp_download_dir}/kustomize.tgz"
  echo "Downloading kustomize from ${download_url}"

  if [[ "${download_url}" == *"tar.gz"* ]]; then
    set +e
    curl -s --fail -L "$download_url" -o "${download_path}"
    result=$?
    set -e

    if [[ "${result}" -ne 0 ]] && [[ ! -z "${download_fallback_url}" ]]; then
      echo "Failed to download kustomize from ${download_url}"
      echo "Fallback: downloading kustomize from ${download_fallback_url}"
      curl -s --fail -L "${download_fallback_url}" -o "${download_path}"
    fi
    tar xpf "${download_path}" -C "${tmp_download_dir}"
    cp "${tmp_download_dir}/kustomize" "${bin_path}"
  else
    curl -s -L "${download_url}" -o "${bin_path}"
  fi
  chmod +x "${bin_path}"
}

get_platform() {
  uname | tr '[:upper:]' '[:lower:]'
}

get_arch() {
  local arch; arch=$(uname -m | tr '[:upper:]' '[:lower:]')
  case ${arch} in
  arm64) # m1 macs
    arch='arm64';;
  aarch64) # all other arm64 devices
    arch='arm64';;
  x86_64)
    arch='amd64';;
  *) # fallback
    arch='amd64';;
  esac

  echo "${ASDF_KUSTOMIZE_OVERWRITE_ARCH:- $arch}"
}

get_download_url() {
  local version="$1"
  local platform="$(get_platform)"
  local arch="$(get_arch)"
  if [[ ! -z "$2" ]] ; then
    arch="$2"
  fi

  if [[ "$version" == *"-banno"* ]]; then
      echo "https://github.com/Banno/kustomize/releases/download/kustomize%2Fv${version}/kustomize_v${version}_${platform}_${arch}.tar.gz"
  else
      vercomp "$version" "3.2.1"
      case $? in
          0) op='=' ;;
          1) op='>' ;;
          2) op='<' ;;
      esac
      if [[ "$op" == '<' ]]; then
          echo "https://github.com/kubernetes-sigs/kustomize/releases/download/v${version}/kustomize_${version}_${platform}_${arch}"
      else
          vercomp "$version" "3.3.0"
          case $? in
              0) op='=' ;;
              1) op='>' ;;
              2) op='<' ;;
          esac
          if [[ "$op" == '<' ]]; then
              echo "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${version}/kustomize_kustomize.v${version}_${platform}_${arch}"
          else
              echo "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${version}/kustomize_v${version}_${platform}_${arch}.tar.gz"
          fi
      fi
  fi
}

tmp_download_dir="$(mktemp -d -t 'asdf_XXXXXXXX')"
trap 'rm -rf "${tmp_download_dir}"' EXIT
install_kustomize $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH $tmp_download_dir
